// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "app/comment.proto" (package "com.article.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message com.article.v1.AddCommentRequest
 */
export interface AddCommentRequest {
    /**
     * @generated from protobuf field: uint64 article_id = 1;
     */
    articleId: bigint;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: uint64 parent_id = 3;
     */
    parentId: bigint;
}
/**
 * @generated from protobuf message com.article.v1.Comment
 */
export interface Comment {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: com.article.v1.Author author = 2;
     */
    author?: Author;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: uint64 parent_id = 4;
     */
    parentId: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_date = 5;
     */
    createdDate?: Timestamp;
    /**
     * @generated from protobuf field: repeated com.article.v1.Comment child_comments = 6;
     */
    childComments: Comment[]; // 用于嵌套子评论
}
/**
 * @generated from protobuf message com.article.v1.Author
 */
export interface Author {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string avatar = 3;
     */
    avatar: string;
}
/**
 * @generated from protobuf message com.article.v1.TopLevelCommentsResponse
 */
export interface TopLevelCommentsResponse {
    /**
     * @generated from protobuf field: repeated com.article.v1.Comment top_level_comments = 1;
     */
    topLevelComments: Comment[];
}
/**
 * @generated from protobuf message com.article.v1.ChildCommentsResponse
 */
export interface ChildCommentsResponse {
    /**
     * @generated from protobuf field: repeated com.article.v1.Comment child_comments = 1;
     */
    childComments: Comment[];
}
/**
 * @generated from protobuf message com.article.v1.FullCommentTreeResponse
 */
export interface FullCommentTreeResponse {
    /**
     * @generated from protobuf field: repeated com.article.v1.Comment comments = 1;
     */
    comments: Comment[];
}
// @generated message type with reflection information, may provide speed optimized methods
class AddCommentRequest$Type extends MessageType<AddCommentRequest> {
    constructor() {
        super("com.article.v1.AddCommentRequest", [
            { no: 1, name: "article_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "parent_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AddCommentRequest>): AddCommentRequest {
        const message = { articleId: 0n, content: "", parentId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddCommentRequest): AddCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 article_id */ 1:
                    message.articleId = reader.uint64().toBigInt();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* uint64 parent_id */ 3:
                    message.parentId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 article_id = 1; */
        if (message.articleId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.articleId);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* uint64 parent_id = 3; */
        if (message.parentId !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.parentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.AddCommentRequest
 */
export const AddCommentRequest = new AddCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Comment$Type extends MessageType<Comment> {
    constructor() {
        super("com.article.v1.Comment", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "author", kind: "message", T: () => Author },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "parent_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "created_date", kind: "message", T: () => Timestamp },
            { no: 6, name: "child_comments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Comment }
        ]);
    }
    create(value?: PartialMessage<Comment>): Comment {
        const message = { id: 0n, content: "", parentId: 0n, childComments: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Comment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Comment): Comment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* com.article.v1.Author author */ 2:
                    message.author = Author.internalBinaryRead(reader, reader.uint32(), options, message.author);
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* uint64 parent_id */ 4:
                    message.parentId = reader.uint64().toBigInt();
                    break;
                case /* google.protobuf.Timestamp created_date */ 5:
                    message.createdDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdDate);
                    break;
                case /* repeated com.article.v1.Comment child_comments */ 6:
                    message.childComments.push(Comment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Comment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* com.article.v1.Author author = 2; */
        if (message.author)
            Author.internalBinaryWrite(message.author, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* uint64 parent_id = 4; */
        if (message.parentId !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.parentId);
        /* google.protobuf.Timestamp created_date = 5; */
        if (message.createdDate)
            Timestamp.internalBinaryWrite(message.createdDate, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.article.v1.Comment child_comments = 6; */
        for (let i = 0; i < message.childComments.length; i++)
            Comment.internalBinaryWrite(message.childComments[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.Comment
 */
export const Comment = new Comment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Author$Type extends MessageType<Author> {
    constructor() {
        super("com.article.v1.Author", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Author>): Author {
        const message = { id: 0n, name: "", avatar: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Author>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Author): Author {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string avatar */ 3:
                    message.avatar = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Author, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string avatar = 3; */
        if (message.avatar !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.avatar);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.Author
 */
export const Author = new Author$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TopLevelCommentsResponse$Type extends MessageType<TopLevelCommentsResponse> {
    constructor() {
        super("com.article.v1.TopLevelCommentsResponse", [
            { no: 1, name: "top_level_comments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Comment }
        ]);
    }
    create(value?: PartialMessage<TopLevelCommentsResponse>): TopLevelCommentsResponse {
        const message = { topLevelComments: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TopLevelCommentsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TopLevelCommentsResponse): TopLevelCommentsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.article.v1.Comment top_level_comments */ 1:
                    message.topLevelComments.push(Comment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TopLevelCommentsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.article.v1.Comment top_level_comments = 1; */
        for (let i = 0; i < message.topLevelComments.length; i++)
            Comment.internalBinaryWrite(message.topLevelComments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.TopLevelCommentsResponse
 */
export const TopLevelCommentsResponse = new TopLevelCommentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChildCommentsResponse$Type extends MessageType<ChildCommentsResponse> {
    constructor() {
        super("com.article.v1.ChildCommentsResponse", [
            { no: 1, name: "child_comments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Comment }
        ]);
    }
    create(value?: PartialMessage<ChildCommentsResponse>): ChildCommentsResponse {
        const message = { childComments: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChildCommentsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChildCommentsResponse): ChildCommentsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.article.v1.Comment child_comments */ 1:
                    message.childComments.push(Comment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChildCommentsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.article.v1.Comment child_comments = 1; */
        for (let i = 0; i < message.childComments.length; i++)
            Comment.internalBinaryWrite(message.childComments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.ChildCommentsResponse
 */
export const ChildCommentsResponse = new ChildCommentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FullCommentTreeResponse$Type extends MessageType<FullCommentTreeResponse> {
    constructor() {
        super("com.article.v1.FullCommentTreeResponse", [
            { no: 1, name: "comments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Comment }
        ]);
    }
    create(value?: PartialMessage<FullCommentTreeResponse>): FullCommentTreeResponse {
        const message = { comments: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FullCommentTreeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FullCommentTreeResponse): FullCommentTreeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.article.v1.Comment comments */ 1:
                    message.comments.push(Comment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FullCommentTreeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.article.v1.Comment comments = 1; */
        for (let i = 0; i < message.comments.length; i++)
            Comment.internalBinaryWrite(message.comments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.FullCommentTreeResponse
 */
export const FullCommentTreeResponse = new FullCommentTreeResponse$Type();
