// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "app/auth.proto" (package "com.auth.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message com.auth.v1.UserInfo
 */
export interface UserInfo {
    /**
     * @inject_tag: json:"id"
     *
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @inject_tag: json:"userName"
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * @inject_tag: json:"realName"
     *
     * @generated from protobuf field: string real_name = 3;
     */
    realName: string;
    /**
     * @inject_tag: json:"phone"
     *
     * @generated from protobuf field: string phone = 4;
     */
    phone: string;
    /**
     * @inject_tag: json:"city"
     *
     * @generated from protobuf field: string city = 5;
     */
    city: string;
    /**
     * @inject_tag: json:"age"
     *
     * @generated from protobuf field: int32 age = 6;
     */
    age: number;
    /**
     * @inject_tag: json:"birthday"
     *
     * @generated from protobuf field: google.protobuf.Timestamp birthday = 7;
     */
    birthday?: Timestamp;
    /**
     * @inject_tag: json:"personalProfile"
     *
     * @generated from protobuf field: string personal_profile = 8;
     */
    personalProfile: string;
    /**
     * @inject_tag: json:"email"
     *
     * @generated from protobuf field: string email = 9;
     */
    email: string;
    /**
     * @inject_tag: json:"avatar"
     *
     * @generated from protobuf field: string avatar = 10;
     */
    avatar: string;
    /**
     * @inject_tag: json:"gender"
     *
     * @generated from protobuf field: com.auth.v1.Gender gender = 11;
     */
    gender: Gender;
    /**
     * 注册时间
     * @inject_tag: json:"createdDate"
     *
     * @generated from protobuf field: google.protobuf.Timestamp created_date = 12;
     */
    createdDate?: Timestamp;
    /**
     * 发布文章数量
     * @inject_tag: json:"articleTotal"
     *
     * @generated from protobuf field: int32 article_total = 13;
     */
    articleTotal: number;
}
/**
 * @generated from protobuf message com.auth.v1.SignupPhoneExistRequest
 */
export interface SignupPhoneExistRequest {
    /**
     * @gotags: valid:"phone"
     *
     * @generated from protobuf field: string phone = 1;
     */
    phone: string;
}
/**
 * @generated from protobuf message com.auth.v1.SignupEmailExistRequest
 */
export interface SignupEmailExistRequest {
    /**
     * @gotags: valid:"email"
     *
     * @generated from protobuf field: string email = 1;
     */
    email: string;
}
/**
 * @generated from protobuf message com.auth.v1.IsExist
 */
export interface IsExist {
    /**
     * @generated from protobuf field: bool exist = 1;
     */
    exist: boolean;
}
/**
 * @generated from protobuf message com.auth.v1.ShowCaptchaReply
 */
export interface ShowCaptchaReply {
    /**
     * 图片验证码id
     *
     * @generated from protobuf field: string captcha_id = 1;
     */
    captchaId: string;
    /**
     * 图片验证码
     *
     * @generated from protobuf field: string captcha_image = 2;
     */
    captchaImage: string;
}
/**
 * @generated from protobuf message com.auth.v1.VerifyCodePhoneRequest
 */
export interface VerifyCodePhoneRequest {
    /**
     * @gotags: valid:"captcha_id"
     *
     * @generated from protobuf field: string captcha_id = 1;
     */
    captchaId: string;
    /**
     * @gotags: valid:"captcha_answer"
     *
     * @generated from protobuf field: string captcha_answer = 2;
     */
    captchaAnswer: string;
    /**
     * @gotags: valid:"phone"
     *
     * @generated from protobuf field: string phone = 3;
     */
    phone: string;
}
/**
 * 用户邮箱注册
 *
 * @generated from protobuf message com.auth.v1.SignupUsingEmailRequest
 */
export interface SignupUsingEmailRequest {
    /**
     * @gotags: valid:"email"
     *
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @gotags: valid:"verify_code"
     *
     * @generated from protobuf field: string verify_code = 2;
     */
    verifyCode: string;
    /**
     * @gotags: valid:"name"
     *
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @gotags: valid:"password"
     *
     * @generated from protobuf field: string password = 4;
     */
    password: string;
    /**
     * @gotags: valid:"password_confirm"
     *
     * @generated from protobuf field: string password_confirm = 5;
     */
    passwordConfirm: string;
}
/**
 * @generated from protobuf message com.auth.v1.SignupUsingEmailReply
 */
export interface SignupUsingEmailReply {
    /**
     * @generated from protobuf field: com.auth.v1.SignupUsingEmailReply.Data data = 1;
     */
    data?: SignupUsingEmailReply_Data;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message com.auth.v1.SignupUsingEmailReply.Data
 */
export interface SignupUsingEmailReply_Data {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * 用户手机注册
 *
 * @generated from protobuf message com.auth.v1.SignupUserUsingPhoneRequest
 */
export interface SignupUserUsingPhoneRequest {
    /**
     * @gotags: valid:"phone"
     *
     * @generated from protobuf field: string phone = 1;
     */
    phone: string;
    /**
     * @gotags: valid:"verify_code"
     *
     * @generated from protobuf field: string verify_code = 2;
     */
    verifyCode: string;
    /**
     * @gotags: valid:"name"
     *
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @gotags: valid:"password"
     *
     * @generated from protobuf field: string password = 4;
     */
    password: string;
    /**
     * @gotags: valid:"password_confirm"
     *
     * @generated from protobuf field: string password_confirm = 5;
     */
    passwordConfirm: string;
}
/**
 * @generated from protobuf message com.auth.v1.SignupUserUsingPhoneReply
 */
export interface SignupUserUsingPhoneReply {
    /**
     * @generated from protobuf field: com.auth.v1.SignupUserUsingPhoneReply.Data data = 1;
     */
    data?: SignupUserUsingPhoneReply_Data;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message com.auth.v1.SignupUserUsingPhoneReply.Data
 */
export interface SignupUserUsingPhoneReply_Data {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * 用户登录并签发JWT
 *
 * @generated from protobuf message com.auth.v1.LoginByPhoneRequest
 */
export interface LoginByPhoneRequest {
    /**
     * @gotags: valid:"phone"
     *
     * @generated from protobuf field: string phone = 1;
     */
    phone: string;
    /**
     * @gotags: valid:"verify_code"
     *
     * @generated from protobuf field: string verify_code = 2;
     */
    verifyCode: string;
}
/**
 * @generated from protobuf message com.auth.v1.LoginByPhoneReply
 */
export interface LoginByPhoneReply {
    /**
     * @generated from protobuf field: uint64 uid = 1;
     */
    uid: bigint;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message com.auth.v1.LoginByPasswordRequest
 */
export interface LoginByPasswordRequest {
    /**
     * @gotags: valid:"account"
     *
     * @generated from protobuf field: string account = 1;
     */
    account: string;
    /**
     * @gotags: valid:"password"
     *
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message com.auth.v1.LoginByPasswordReply
 */
export interface LoginByPasswordReply {
    /**
     * @generated from protobuf field: uint64 uid = 1;
     */
    uid: bigint;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message com.auth.v1.VerifyCodeEmailRequest
 */
export interface VerifyCodeEmailRequest {
    /**
     * @gotags: valid:"captcha_id"
     *
     * @generated from protobuf field: string captcha_id = 1;
     */
    captchaId: string;
    /**
     * @gotags: valid:"captcha_answer"
     *
     * @generated from protobuf field: string captcha_answer = 2;
     */
    captchaAnswer: string;
    /**
     * @gotags: valid:"email"
     *
     * @generated from protobuf field: string email = 3;
     */
    email: string;
}
/**
 * @generated from protobuf message com.auth.v1.GetUserInfoReply
 */
export interface GetUserInfoReply {
    /**
     * @inject_tag: json:"userInfo"
     *
     * @generated from protobuf field: com.auth.v1.UserInfo user_info = 1;
     */
    userInfo?: UserInfo;
}
/**
 * @generated from protobuf message com.auth.v1.UpdateUserInfoRequest
 */
export interface UpdateUserInfoRequest {
    /**
     * @inject_tag: json:"id"
     *
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @inject_tag: json:"userName"
     *
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * @inject_tag: json:"realName"
     *
     * @generated from protobuf field: string real_name = 3;
     */
    realName: string;
    /**
     * @inject_tag: json:"phone"
     *
     * @generated from protobuf field: string phone = 4;
     */
    phone: string;
    /**
     * @inject_tag: json:"city"
     *
     * @generated from protobuf field: string city = 5;
     */
    city: string;
    /**
     * @inject_tag: json:"age"
     *
     * @generated from protobuf field: int32 age = 6;
     */
    age: number;
    /**
     * @inject_tag: json:"personalProfile"
     *
     * @generated from protobuf field: string personal_profile = 8;
     */
    personalProfile: string;
    /**
     * @inject_tag: json:"email"
     *
     * @generated from protobuf field: string email = 9;
     */
    email: string;
    /**
     * @inject_tag: json:"avatar"
     *
     * @generated from protobuf field: string avatar = 10;
     */
    avatar: string;
    /**
     * @inject_tag: json:"gender"
     *
     * @generated from protobuf field: com.auth.v1.Gender gender = 11;
     */
    gender: Gender;
}
/**
 * @generated from protobuf message com.auth.v1.UpdateUserInfoReply
 */
export interface UpdateUserInfoReply {
    /**
     * @inject_tag: json:"userInfo"
     *
     * @generated from protobuf field: com.auth.v1.UserInfo user_info = 1;
     */
    userInfo?: UserInfo;
}
/**
 * @generated from protobuf enum com.auth.v1.Gender
 */
export enum Gender {
    /**
     * @generated from protobuf enum value: MALE = 0;
     */
    MALE = 0,
    /**
     * @generated from protobuf enum value: FEMALE = 1;
     */
    FEMALE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class UserInfo$Type extends MessageType<UserInfo> {
    constructor() {
        super("com.auth.v1.UserInfo", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "real_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "age", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "birthday", kind: "message", T: () => Timestamp },
            { no: 8, name: "personal_profile", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "gender", kind: "enum", T: () => ["com.auth.v1.Gender", Gender] },
            { no: 12, name: "created_date", kind: "message", T: () => Timestamp },
            { no: 13, name: "article_total", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UserInfo>): UserInfo {
        const message = { id: 0n, userName: "", realName: "", phone: "", city: "", age: 0, personalProfile: "", email: "", avatar: "", gender: 0, articleTotal: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserInfo): UserInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* string real_name */ 3:
                    message.realName = reader.string();
                    break;
                case /* string phone */ 4:
                    message.phone = reader.string();
                    break;
                case /* string city */ 5:
                    message.city = reader.string();
                    break;
                case /* int32 age */ 6:
                    message.age = reader.int32();
                    break;
                case /* google.protobuf.Timestamp birthday */ 7:
                    message.birthday = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.birthday);
                    break;
                case /* string personal_profile */ 8:
                    message.personalProfile = reader.string();
                    break;
                case /* string email */ 9:
                    message.email = reader.string();
                    break;
                case /* string avatar */ 10:
                    message.avatar = reader.string();
                    break;
                case /* com.auth.v1.Gender gender */ 11:
                    message.gender = reader.int32();
                    break;
                case /* google.protobuf.Timestamp created_date */ 12:
                    message.createdDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdDate);
                    break;
                case /* int32 article_total */ 13:
                    message.articleTotal = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* string real_name = 3; */
        if (message.realName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.realName);
        /* string phone = 4; */
        if (message.phone !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.phone);
        /* string city = 5; */
        if (message.city !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.city);
        /* int32 age = 6; */
        if (message.age !== 0)
            writer.tag(6, WireType.Varint).int32(message.age);
        /* google.protobuf.Timestamp birthday = 7; */
        if (message.birthday)
            Timestamp.internalBinaryWrite(message.birthday, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string personal_profile = 8; */
        if (message.personalProfile !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.personalProfile);
        /* string email = 9; */
        if (message.email !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.email);
        /* string avatar = 10; */
        if (message.avatar !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.avatar);
        /* com.auth.v1.Gender gender = 11; */
        if (message.gender !== 0)
            writer.tag(11, WireType.Varint).int32(message.gender);
        /* google.protobuf.Timestamp created_date = 12; */
        if (message.createdDate)
            Timestamp.internalBinaryWrite(message.createdDate, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* int32 article_total = 13; */
        if (message.articleTotal !== 0)
            writer.tag(13, WireType.Varint).int32(message.articleTotal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.UserInfo
 */
export const UserInfo = new UserInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignupPhoneExistRequest$Type extends MessageType<SignupPhoneExistRequest> {
    constructor() {
        super("com.auth.v1.SignupPhoneExistRequest", [
            { no: 1, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignupPhoneExistRequest>): SignupPhoneExistRequest {
        const message = { phone: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignupPhoneExistRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignupPhoneExistRequest): SignupPhoneExistRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string phone */ 1:
                    message.phone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignupPhoneExistRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string phone = 1; */
        if (message.phone !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.phone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.SignupPhoneExistRequest
 */
export const SignupPhoneExistRequest = new SignupPhoneExistRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignupEmailExistRequest$Type extends MessageType<SignupEmailExistRequest> {
    constructor() {
        super("com.auth.v1.SignupEmailExistRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignupEmailExistRequest>): SignupEmailExistRequest {
        const message = { email: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignupEmailExistRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignupEmailExistRequest): SignupEmailExistRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignupEmailExistRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.SignupEmailExistRequest
 */
export const SignupEmailExistRequest = new SignupEmailExistRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsExist$Type extends MessageType<IsExist> {
    constructor() {
        super("com.auth.v1.IsExist", [
            { no: 1, name: "exist", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IsExist>): IsExist {
        const message = { exist: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsExist>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsExist): IsExist {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool exist */ 1:
                    message.exist = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsExist, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool exist = 1; */
        if (message.exist !== false)
            writer.tag(1, WireType.Varint).bool(message.exist);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.IsExist
 */
export const IsExist = new IsExist$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowCaptchaReply$Type extends MessageType<ShowCaptchaReply> {
    constructor() {
        super("com.auth.v1.ShowCaptchaReply", [
            { no: 1, name: "captcha_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "captcha_image", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShowCaptchaReply>): ShowCaptchaReply {
        const message = { captchaId: "", captchaImage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowCaptchaReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowCaptchaReply): ShowCaptchaReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string captcha_id */ 1:
                    message.captchaId = reader.string();
                    break;
                case /* string captcha_image */ 2:
                    message.captchaImage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowCaptchaReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string captcha_id = 1; */
        if (message.captchaId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.captchaId);
        /* string captcha_image = 2; */
        if (message.captchaImage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.captchaImage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.ShowCaptchaReply
 */
export const ShowCaptchaReply = new ShowCaptchaReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyCodePhoneRequest$Type extends MessageType<VerifyCodePhoneRequest> {
    constructor() {
        super("com.auth.v1.VerifyCodePhoneRequest", [
            { no: 1, name: "captcha_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "captcha_answer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VerifyCodePhoneRequest>): VerifyCodePhoneRequest {
        const message = { captchaId: "", captchaAnswer: "", phone: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VerifyCodePhoneRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyCodePhoneRequest): VerifyCodePhoneRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string captcha_id */ 1:
                    message.captchaId = reader.string();
                    break;
                case /* string captcha_answer */ 2:
                    message.captchaAnswer = reader.string();
                    break;
                case /* string phone */ 3:
                    message.phone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyCodePhoneRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string captcha_id = 1; */
        if (message.captchaId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.captchaId);
        /* string captcha_answer = 2; */
        if (message.captchaAnswer !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.captchaAnswer);
        /* string phone = 3; */
        if (message.phone !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.phone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.VerifyCodePhoneRequest
 */
export const VerifyCodePhoneRequest = new VerifyCodePhoneRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignupUsingEmailRequest$Type extends MessageType<SignupUsingEmailRequest> {
    constructor() {
        super("com.auth.v1.SignupUsingEmailRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "verify_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "password_confirm", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignupUsingEmailRequest>): SignupUsingEmailRequest {
        const message = { email: "", verifyCode: "", name: "", password: "", passwordConfirm: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignupUsingEmailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignupUsingEmailRequest): SignupUsingEmailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string verify_code */ 2:
                    message.verifyCode = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string password */ 4:
                    message.password = reader.string();
                    break;
                case /* string password_confirm */ 5:
                    message.passwordConfirm = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignupUsingEmailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string verify_code = 2; */
        if (message.verifyCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.verifyCode);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string password = 4; */
        if (message.password !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.password);
        /* string password_confirm = 5; */
        if (message.passwordConfirm !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.passwordConfirm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.SignupUsingEmailRequest
 */
export const SignupUsingEmailRequest = new SignupUsingEmailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignupUsingEmailReply$Type extends MessageType<SignupUsingEmailReply> {
    constructor() {
        super("com.auth.v1.SignupUsingEmailReply", [
            { no: 1, name: "data", kind: "message", T: () => SignupUsingEmailReply_Data },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignupUsingEmailReply>): SignupUsingEmailReply {
        const message = { token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignupUsingEmailReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignupUsingEmailReply): SignupUsingEmailReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.auth.v1.SignupUsingEmailReply.Data data */ 1:
                    message.data = SignupUsingEmailReply_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignupUsingEmailReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.auth.v1.SignupUsingEmailReply.Data data = 1; */
        if (message.data)
            SignupUsingEmailReply_Data.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.SignupUsingEmailReply
 */
export const SignupUsingEmailReply = new SignupUsingEmailReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignupUsingEmailReply_Data$Type extends MessageType<SignupUsingEmailReply_Data> {
    constructor() {
        super("com.auth.v1.SignupUsingEmailReply.Data", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignupUsingEmailReply_Data>): SignupUsingEmailReply_Data {
        const message = { id: 0n, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignupUsingEmailReply_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignupUsingEmailReply_Data): SignupUsingEmailReply_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignupUsingEmailReply_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.SignupUsingEmailReply.Data
 */
export const SignupUsingEmailReply_Data = new SignupUsingEmailReply_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignupUserUsingPhoneRequest$Type extends MessageType<SignupUserUsingPhoneRequest> {
    constructor() {
        super("com.auth.v1.SignupUserUsingPhoneRequest", [
            { no: 1, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "verify_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "password_confirm", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignupUserUsingPhoneRequest>): SignupUserUsingPhoneRequest {
        const message = { phone: "", verifyCode: "", name: "", password: "", passwordConfirm: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignupUserUsingPhoneRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignupUserUsingPhoneRequest): SignupUserUsingPhoneRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string phone */ 1:
                    message.phone = reader.string();
                    break;
                case /* string verify_code */ 2:
                    message.verifyCode = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string password */ 4:
                    message.password = reader.string();
                    break;
                case /* string password_confirm */ 5:
                    message.passwordConfirm = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignupUserUsingPhoneRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string phone = 1; */
        if (message.phone !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.phone);
        /* string verify_code = 2; */
        if (message.verifyCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.verifyCode);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string password = 4; */
        if (message.password !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.password);
        /* string password_confirm = 5; */
        if (message.passwordConfirm !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.passwordConfirm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.SignupUserUsingPhoneRequest
 */
export const SignupUserUsingPhoneRequest = new SignupUserUsingPhoneRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignupUserUsingPhoneReply$Type extends MessageType<SignupUserUsingPhoneReply> {
    constructor() {
        super("com.auth.v1.SignupUserUsingPhoneReply", [
            { no: 1, name: "data", kind: "message", T: () => SignupUserUsingPhoneReply_Data },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignupUserUsingPhoneReply>): SignupUserUsingPhoneReply {
        const message = { token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignupUserUsingPhoneReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignupUserUsingPhoneReply): SignupUserUsingPhoneReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.auth.v1.SignupUserUsingPhoneReply.Data data */ 1:
                    message.data = SignupUserUsingPhoneReply_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignupUserUsingPhoneReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.auth.v1.SignupUserUsingPhoneReply.Data data = 1; */
        if (message.data)
            SignupUserUsingPhoneReply_Data.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.SignupUserUsingPhoneReply
 */
export const SignupUserUsingPhoneReply = new SignupUserUsingPhoneReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignupUserUsingPhoneReply_Data$Type extends MessageType<SignupUserUsingPhoneReply_Data> {
    constructor() {
        super("com.auth.v1.SignupUserUsingPhoneReply.Data", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignupUserUsingPhoneReply_Data>): SignupUserUsingPhoneReply_Data {
        const message = { id: 0n, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignupUserUsingPhoneReply_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignupUserUsingPhoneReply_Data): SignupUserUsingPhoneReply_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignupUserUsingPhoneReply_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.SignupUserUsingPhoneReply.Data
 */
export const SignupUserUsingPhoneReply_Data = new SignupUserUsingPhoneReply_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginByPhoneRequest$Type extends MessageType<LoginByPhoneRequest> {
    constructor() {
        super("com.auth.v1.LoginByPhoneRequest", [
            { no: 1, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "verify_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginByPhoneRequest>): LoginByPhoneRequest {
        const message = { phone: "", verifyCode: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginByPhoneRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginByPhoneRequest): LoginByPhoneRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string phone */ 1:
                    message.phone = reader.string();
                    break;
                case /* string verify_code */ 2:
                    message.verifyCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginByPhoneRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string phone = 1; */
        if (message.phone !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.phone);
        /* string verify_code = 2; */
        if (message.verifyCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.verifyCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.LoginByPhoneRequest
 */
export const LoginByPhoneRequest = new LoginByPhoneRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginByPhoneReply$Type extends MessageType<LoginByPhoneReply> {
    constructor() {
        super("com.auth.v1.LoginByPhoneReply", [
            { no: 1, name: "uid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginByPhoneReply>): LoginByPhoneReply {
        const message = { uid: 0n, token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginByPhoneReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginByPhoneReply): LoginByPhoneReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 uid */ 1:
                    message.uid = reader.uint64().toBigInt();
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginByPhoneReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 uid = 1; */
        if (message.uid !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.uid);
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.LoginByPhoneReply
 */
export const LoginByPhoneReply = new LoginByPhoneReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginByPasswordRequest$Type extends MessageType<LoginByPasswordRequest> {
    constructor() {
        super("com.auth.v1.LoginByPasswordRequest", [
            { no: 1, name: "account", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginByPasswordRequest>): LoginByPasswordRequest {
        const message = { account: "", password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginByPasswordRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginByPasswordRequest): LoginByPasswordRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string account */ 1:
                    message.account = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginByPasswordRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string account = 1; */
        if (message.account !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.account);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.LoginByPasswordRequest
 */
export const LoginByPasswordRequest = new LoginByPasswordRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginByPasswordReply$Type extends MessageType<LoginByPasswordReply> {
    constructor() {
        super("com.auth.v1.LoginByPasswordReply", [
            { no: 1, name: "uid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginByPasswordReply>): LoginByPasswordReply {
        const message = { uid: 0n, token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginByPasswordReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginByPasswordReply): LoginByPasswordReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 uid */ 1:
                    message.uid = reader.uint64().toBigInt();
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginByPasswordReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 uid = 1; */
        if (message.uid !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.uid);
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.LoginByPasswordReply
 */
export const LoginByPasswordReply = new LoginByPasswordReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyCodeEmailRequest$Type extends MessageType<VerifyCodeEmailRequest> {
    constructor() {
        super("com.auth.v1.VerifyCodeEmailRequest", [
            { no: 1, name: "captcha_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "captcha_answer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VerifyCodeEmailRequest>): VerifyCodeEmailRequest {
        const message = { captchaId: "", captchaAnswer: "", email: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VerifyCodeEmailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyCodeEmailRequest): VerifyCodeEmailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string captcha_id */ 1:
                    message.captchaId = reader.string();
                    break;
                case /* string captcha_answer */ 2:
                    message.captchaAnswer = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyCodeEmailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string captcha_id = 1; */
        if (message.captchaId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.captchaId);
        /* string captcha_answer = 2; */
        if (message.captchaAnswer !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.captchaAnswer);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.VerifyCodeEmailRequest
 */
export const VerifyCodeEmailRequest = new VerifyCodeEmailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserInfoReply$Type extends MessageType<GetUserInfoReply> {
    constructor() {
        super("com.auth.v1.GetUserInfoReply", [
            { no: 1, name: "user_info", kind: "message", T: () => UserInfo }
        ]);
    }
    create(value?: PartialMessage<GetUserInfoReply>): GetUserInfoReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUserInfoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserInfoReply): GetUserInfoReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.auth.v1.UserInfo user_info */ 1:
                    message.userInfo = UserInfo.internalBinaryRead(reader, reader.uint32(), options, message.userInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserInfoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.auth.v1.UserInfo user_info = 1; */
        if (message.userInfo)
            UserInfo.internalBinaryWrite(message.userInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.GetUserInfoReply
 */
export const GetUserInfoReply = new GetUserInfoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserInfoRequest$Type extends MessageType<UpdateUserInfoRequest> {
    constructor() {
        super("com.auth.v1.UpdateUserInfoRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "real_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "age", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "personal_profile", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "gender", kind: "enum", T: () => ["com.auth.v1.Gender", Gender] }
        ]);
    }
    create(value?: PartialMessage<UpdateUserInfoRequest>): UpdateUserInfoRequest {
        const message = { id: 0n, userName: "", realName: "", phone: "", city: "", age: 0, personalProfile: "", email: "", avatar: "", gender: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateUserInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserInfoRequest): UpdateUserInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* string real_name */ 3:
                    message.realName = reader.string();
                    break;
                case /* string phone */ 4:
                    message.phone = reader.string();
                    break;
                case /* string city */ 5:
                    message.city = reader.string();
                    break;
                case /* int32 age */ 6:
                    message.age = reader.int32();
                    break;
                case /* string personal_profile */ 8:
                    message.personalProfile = reader.string();
                    break;
                case /* string email */ 9:
                    message.email = reader.string();
                    break;
                case /* string avatar */ 10:
                    message.avatar = reader.string();
                    break;
                case /* com.auth.v1.Gender gender */ 11:
                    message.gender = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* string real_name = 3; */
        if (message.realName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.realName);
        /* string phone = 4; */
        if (message.phone !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.phone);
        /* string city = 5; */
        if (message.city !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.city);
        /* int32 age = 6; */
        if (message.age !== 0)
            writer.tag(6, WireType.Varint).int32(message.age);
        /* string personal_profile = 8; */
        if (message.personalProfile !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.personalProfile);
        /* string email = 9; */
        if (message.email !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.email);
        /* string avatar = 10; */
        if (message.avatar !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.avatar);
        /* com.auth.v1.Gender gender = 11; */
        if (message.gender !== 0)
            writer.tag(11, WireType.Varint).int32(message.gender);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.UpdateUserInfoRequest
 */
export const UpdateUserInfoRequest = new UpdateUserInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserInfoReply$Type extends MessageType<UpdateUserInfoReply> {
    constructor() {
        super("com.auth.v1.UpdateUserInfoReply", [
            { no: 1, name: "user_info", kind: "message", T: () => UserInfo }
        ]);
    }
    create(value?: PartialMessage<UpdateUserInfoReply>): UpdateUserInfoReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateUserInfoReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserInfoReply): UpdateUserInfoReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.auth.v1.UserInfo user_info */ 1:
                    message.userInfo = UserInfo.internalBinaryRead(reader, reader.uint32(), options, message.userInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserInfoReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.auth.v1.UserInfo user_info = 1; */
        if (message.userInfo)
            UserInfo.internalBinaryWrite(message.userInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.auth.v1.UpdateUserInfoReply
 */
export const UpdateUserInfoReply = new UpdateUserInfoReply$Type();
