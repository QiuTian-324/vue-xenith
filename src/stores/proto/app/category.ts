// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "app/category.proto" (package "com.category.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * 分类
 *
 * @generated from protobuf message com.category.v1.Category
 */
export interface Category {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * 上级分类id(可为空)
     *
     * @generated from protobuf field: uint64 parent_id = 2;
     */
    parentId: bigint;
    /**
     * 分类名称
     * @gotags: valid:"name"
     *
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * 分类树节点
 *
 * @generated from protobuf message com.category.v1.CategoryTreeNode
 */
export interface CategoryTreeNode {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * 分类名称
     * @gotags: valid:"name"
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * 上级分类节点(可为空)
     *
     * @generated from protobuf field: uint64 parent_id = 3;
     */
    parentId: bigint;
    /**
     * 子节点
     *
     * @generated from protobuf field: repeated com.category.v1.CategoryTreeNode children = 4;
     */
    children: CategoryTreeNode[];
}
/**
 * @generated from protobuf message com.category.v1.CreateCategoryRequest
 */
export interface CreateCategoryRequest {
    /**
     * @generated from protobuf field: com.category.v1.Category category = 1;
     */
    category?: Category;
}
/**
 * @generated from protobuf message com.category.v1.CreateCategoryReply
 */
export interface CreateCategoryReply {
    /**
     * @generated from protobuf field: com.category.v1.Category category = 1;
     */
    category?: Category;
}
/**
 * @generated from protobuf message com.category.v1.ListCategoryRequest
 */
export interface ListCategoryRequest {
    /**
     * 上级分类id
     *
     * @generated from protobuf field: uint64 parent_id = 1;
     */
    parentId: bigint;
}
/**
 * @generated from protobuf message com.category.v1.ListCategoryReply
 */
export interface ListCategoryReply {
    /**
     * @generated from protobuf field: repeated com.category.v1.Category items = 1;
     */
    items: Category[];
}
/**
 * @generated from protobuf message com.category.v1.GetCategoryRequest
 */
export interface GetCategoryRequest {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message com.category.v1.GetCategoryReply
 */
export interface GetCategoryReply {
    /**
     * @generated from protobuf field: com.category.v1.Category category = 1;
     */
    category?: Category;
}
/**
 * @generated from protobuf message com.category.v1.GetCategoryTreeRequest
 */
export interface GetCategoryTreeRequest {
}
/**
 * @generated from protobuf message com.category.v1.GetCategoryTreeReply
 */
export interface GetCategoryTreeReply {
    /**
     * @generated from protobuf field: repeated com.category.v1.CategoryTreeNode nodes = 1;
     */
    nodes: CategoryTreeNode[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Category$Type extends MessageType<Category> {
    constructor() {
        super("com.category.v1.Category", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "parent_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Category>): Category {
        const message = { id: 0n, parentId: 0n, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Category>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Category): Category {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* uint64 parent_id */ 2:
                    message.parentId = reader.uint64().toBigInt();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Category, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* uint64 parent_id = 2; */
        if (message.parentId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.parentId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.category.v1.Category
 */
export const Category = new Category$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CategoryTreeNode$Type extends MessageType<CategoryTreeNode> {
    constructor() {
        super("com.category.v1.CategoryTreeNode", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "parent_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "children", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CategoryTreeNode }
        ]);
    }
    create(value?: PartialMessage<CategoryTreeNode>): CategoryTreeNode {
        const message = { id: 0n, name: "", parentId: 0n, children: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CategoryTreeNode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategoryTreeNode): CategoryTreeNode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* uint64 parent_id */ 3:
                    message.parentId = reader.uint64().toBigInt();
                    break;
                case /* repeated com.category.v1.CategoryTreeNode children */ 4:
                    message.children.push(CategoryTreeNode.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategoryTreeNode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* uint64 parent_id = 3; */
        if (message.parentId !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.parentId);
        /* repeated com.category.v1.CategoryTreeNode children = 4; */
        for (let i = 0; i < message.children.length; i++)
            CategoryTreeNode.internalBinaryWrite(message.children[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.category.v1.CategoryTreeNode
 */
export const CategoryTreeNode = new CategoryTreeNode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCategoryRequest$Type extends MessageType<CreateCategoryRequest> {
    constructor() {
        super("com.category.v1.CreateCategoryRequest", [
            { no: 1, name: "category", kind: "message", T: () => Category }
        ]);
    }
    create(value?: PartialMessage<CreateCategoryRequest>): CreateCategoryRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCategoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCategoryRequest): CreateCategoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.category.v1.Category category */ 1:
                    message.category = Category.internalBinaryRead(reader, reader.uint32(), options, message.category);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCategoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.category.v1.Category category = 1; */
        if (message.category)
            Category.internalBinaryWrite(message.category, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.category.v1.CreateCategoryRequest
 */
export const CreateCategoryRequest = new CreateCategoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCategoryReply$Type extends MessageType<CreateCategoryReply> {
    constructor() {
        super("com.category.v1.CreateCategoryReply", [
            { no: 1, name: "category", kind: "message", T: () => Category }
        ]);
    }
    create(value?: PartialMessage<CreateCategoryReply>): CreateCategoryReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCategoryReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCategoryReply): CreateCategoryReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.category.v1.Category category */ 1:
                    message.category = Category.internalBinaryRead(reader, reader.uint32(), options, message.category);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCategoryReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.category.v1.Category category = 1; */
        if (message.category)
            Category.internalBinaryWrite(message.category, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.category.v1.CreateCategoryReply
 */
export const CreateCategoryReply = new CreateCategoryReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCategoryRequest$Type extends MessageType<ListCategoryRequest> {
    constructor() {
        super("com.category.v1.ListCategoryRequest", [
            { no: 1, name: "parent_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ListCategoryRequest>): ListCategoryRequest {
        const message = { parentId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListCategoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCategoryRequest): ListCategoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 parent_id */ 1:
                    message.parentId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCategoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 parent_id = 1; */
        if (message.parentId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.parentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.category.v1.ListCategoryRequest
 */
export const ListCategoryRequest = new ListCategoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCategoryReply$Type extends MessageType<ListCategoryReply> {
    constructor() {
        super("com.category.v1.ListCategoryReply", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Category }
        ]);
    }
    create(value?: PartialMessage<ListCategoryReply>): ListCategoryReply {
        const message = { items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListCategoryReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCategoryReply): ListCategoryReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.category.v1.Category items */ 1:
                    message.items.push(Category.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCategoryReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.category.v1.Category items = 1; */
        for (let i = 0; i < message.items.length; i++)
            Category.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.category.v1.ListCategoryReply
 */
export const ListCategoryReply = new ListCategoryReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoryRequest$Type extends MessageType<GetCategoryRequest> {
    constructor() {
        super("com.category.v1.GetCategoryRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetCategoryRequest>): GetCategoryRequest {
        const message = { id: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCategoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoryRequest): GetCategoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCategoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.category.v1.GetCategoryRequest
 */
export const GetCategoryRequest = new GetCategoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoryReply$Type extends MessageType<GetCategoryReply> {
    constructor() {
        super("com.category.v1.GetCategoryReply", [
            { no: 1, name: "category", kind: "message", T: () => Category }
        ]);
    }
    create(value?: PartialMessage<GetCategoryReply>): GetCategoryReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCategoryReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoryReply): GetCategoryReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.category.v1.Category category */ 1:
                    message.category = Category.internalBinaryRead(reader, reader.uint32(), options, message.category);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCategoryReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.category.v1.Category category = 1; */
        if (message.category)
            Category.internalBinaryWrite(message.category, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.category.v1.GetCategoryReply
 */
export const GetCategoryReply = new GetCategoryReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoryTreeRequest$Type extends MessageType<GetCategoryTreeRequest> {
    constructor() {
        super("com.category.v1.GetCategoryTreeRequest", []);
    }
    create(value?: PartialMessage<GetCategoryTreeRequest>): GetCategoryTreeRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCategoryTreeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoryTreeRequest): GetCategoryTreeRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetCategoryTreeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.category.v1.GetCategoryTreeRequest
 */
export const GetCategoryTreeRequest = new GetCategoryTreeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoryTreeReply$Type extends MessageType<GetCategoryTreeReply> {
    constructor() {
        super("com.category.v1.GetCategoryTreeReply", [
            { no: 1, name: "nodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CategoryTreeNode }
        ]);
    }
    create(value?: PartialMessage<GetCategoryTreeReply>): GetCategoryTreeReply {
        const message = { nodes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCategoryTreeReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoryTreeReply): GetCategoryTreeReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.category.v1.CategoryTreeNode nodes */ 1:
                    message.nodes.push(CategoryTreeNode.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCategoryTreeReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.category.v1.CategoryTreeNode nodes = 1; */
        for (let i = 0; i < message.nodes.length; i++)
            CategoryTreeNode.internalBinaryWrite(message.nodes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.category.v1.GetCategoryTreeReply
 */
export const GetCategoryTreeReply = new GetCategoryTreeReply$Type();
