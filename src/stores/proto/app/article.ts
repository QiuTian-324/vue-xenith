// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "app/article.proto" (package "com.article.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message com.article.v1.Article
 */
export interface Article {
    /**
     * 博文ID
     * @inject_tag: json:"id"
     *
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @inject_tag: json:"author"
     *
     * @generated from protobuf field: com.article.v1.Article.Author author = 2;
     */
    author?: Article_Author;
    /**
     * 博文标题
     * @inject_tag: json:"title"
     *
     * @generated from protobuf field: string title = 7;
     */
    title: string;
    /**
     * 博文摘要
     * @inject_tag: json:"summary"
     *
     * @generated from protobuf field: string summary = 8;
     */
    summary: string;
    /**
     * 博文内容
     * @inject_tag: json:"content"
     *
     * @generated from protobuf field: string content = 9;
     */
    content: string;
    /**
     * 博文点赞数量
     * @inject_tag: json:"links"
     *
     * @generated from protobuf field: int32 links = 10;
     */
    links: number;
    /**
     * 博文浏览量
     * @inject_tag: json:"views"
     *
     * @generated from protobuf field: int32 views = 11;
     */
    views: number;
    /**
     * 博文状态
     * @inject_tag: json:"status"
     *
     * @generated from protobuf field: com.article.v1.ArticleStatus status = 12;
     */
    status: ArticleStatus;
    /**
     * 创建时间
     * @inject_tag: json:"createdDate"
     *
     * @generated from protobuf field: google.protobuf.Timestamp created_date = 13;
     */
    createdDate?: Timestamp;
    /**
     * 更新时间
     * @inject_tag: json:"updatedDate"
     *
     * @generated from protobuf field: google.protobuf.Timestamp updated_date = 14;
     */
    updatedDate?: Timestamp;
}
/**
 * @generated from protobuf message com.article.v1.Article.Author
 */
export interface Article_Author {
    /**
     * 博文作者
     * @inject_tag: json:"id"
     *
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * 作者名称
     * @inject_tag: json:"name"
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * 作者头像
     * @inject_tag: json:"avatar"
     *
     * @generated from protobuf field: string avatar = 3;
     */
    avatar: string;
    /**
     * 作者发布文章数量
     * @inject_tag: json:"articleTotal"
     *
     * @generated from protobuf field: int32 article_total = 4;
     */
    articleTotal: number;
}
/**
 * @generated from protobuf message com.article.v1.CreateArticleRequest
 */
export interface CreateArticleRequest {
    /**
     * 博文标题
     * @inject_tag: valid:"title"
     *
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * 博文摘要
     * @inject_tag: valid:"summary"
     *
     * @generated from protobuf field: string summary = 3;
     */
    summary: string;
    /**
     * 博文内容
     * @inject_tag: valid:"content"
     *
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * 博文状态
     * @inject_tag: valid:"status"
     *
     * @generated from protobuf field: com.article.v1.ArticleStatus status = 5;
     */
    status: ArticleStatus;
}
/**
 * @generated from protobuf message com.article.v1.CreateArticleReply
 */
export interface CreateArticleReply {
}
/**
 * @generated from protobuf message com.article.v1.ListArticleRequest
 */
export interface ListArticleRequest {
    /**
     * 分页页码
     *
     * @generated from protobuf field: uint32 page = 1;
     */
    page: number;
}
/**
 * @generated from protobuf message com.article.v1.ListArticleReply
 */
export interface ListArticleReply {
    /**
     * 博文
     * @inject_tag: json:"data"
     *
     * @generated from protobuf field: repeated com.article.v1.Article data = 1;
     */
    data: Article[];
    /**
     * 总数量
     * @inject_tag: json:"total"
     *
     * @generated from protobuf field: uint32 total = 2;
     */
    total: number;
    /**
     * 当前返回数量
     * @inject_tag: json:"count"
     *
     * @generated from protobuf field: uint32 count = 3;
     */
    count: number;
    /**
     * 当前页
     * @inject_tag: json:"page"
     *
     * @generated from protobuf field: uint32 page = 4;
     */
    page: number;
}
/**
 * @generated from protobuf message com.article.v1.GetArticleRequest
 */
export interface GetArticleRequest {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message com.article.v1.GetArticleReply
 */
export interface GetArticleReply {
    /**
     * @generated from protobuf field: com.article.v1.Article article = 1;
     */
    article?: Article;
}
/**
 * @generated from protobuf message com.article.v1.UpdateArticleRequest
 */
export interface UpdateArticleRequest {
    /**
     * @inject_tag: json:"id"
     *
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * 博文标题
     * @inject_tag: valid:"title"
     *
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * 博文摘要
     * @inject_tag: valid:"summary"
     *
     * @generated from protobuf field: string summary = 3;
     */
    summary: string;
    /**
     * 博文内容
     * @inject_tag: valid:"content"
     *
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * 博文状态
     * @inject_tag: valid:"status"
     *
     * @generated from protobuf field: com.article.v1.ArticleStatus status = 5;
     */
    status: ArticleStatus;
}
/**
 * @generated from protobuf message com.article.v1.UpdateArticleReply
 */
export interface UpdateArticleReply {
}
/**
 * @generated from protobuf message com.article.v1.Success
 */
export interface Success {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message com.article.v1.ListArticlesForUserRequest
 */
export interface ListArticlesForUserRequest {
    /**
     * @inject_tag: json:"userId"
     *
     * @generated from protobuf field: uint64 user_id = 1;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: uint32 page = 2;
     */
    page: number;
}
/**
 * @generated from protobuf message com.article.v1.ListArticlesForUserReply
 */
export interface ListArticlesForUserReply {
    /**
     * 博文
     * @inject_tag: json:"data"
     *
     * @generated from protobuf field: repeated com.article.v1.ListArticlesForUserReply.Article data = 1;
     */
    data: ListArticlesForUserReply_Article[];
    /**
     * 总数量
     * @inject_tag: json:"total"
     *
     * @generated from protobuf field: uint32 total = 2;
     */
    total: number;
    /**
     * 当前返回数量
     * @inject_tag: json:"count"
     *
     * @generated from protobuf field: uint32 count = 3;
     */
    count: number;
    /**
     * 当前页
     * @inject_tag: json:"page"
     *
     * @generated from protobuf field: uint32 page = 4;
     */
    page: number;
}
/**
 * @generated from protobuf message com.article.v1.ListArticlesForUserReply.Article
 */
export interface ListArticlesForUserReply_Article {
    /**
     * 博文ID
     * @inject_tag: json:"id"
     *
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * 博文标题
     * @inject_tag: json:"title"
     *
     * @generated from protobuf field: string title = 7;
     */
    title: string;
    /**
     * 博文摘要
     * @inject_tag: json:"summary"
     *
     * @generated from protobuf field: string summary = 8;
     */
    summary: string;
    /**
     * 博文点赞数量
     * @inject_tag: json:"links"
     *
     * @generated from protobuf field: int32 links = 10;
     */
    links: number;
    /**
     * 博文浏览量
     * @inject_tag: json:"views"
     *
     * @generated from protobuf field: int32 views = 11;
     */
    views: number;
    /**
     * 创建时间
     * @inject_tag: json:"createdDate"
     *
     * @generated from protobuf field: google.protobuf.Timestamp created_date = 13;
     */
    createdDate?: Timestamp;
    /**
     * 更新时间
     * @inject_tag: json:"updatedDate"
     *
     * @generated from protobuf field: google.protobuf.Timestamp updated_date = 14;
     */
    updatedDate?: Timestamp;
}
/**
 * @generated from protobuf enum com.article.v1.ArticleStatus
 */
export enum ArticleStatus {
    /**
     * 草稿
     *
     * @generated from protobuf enum value: DRAFT = 0;
     */
    DRAFT = 0,
    /**
     * 生效
     *
     * @generated from protobuf enum value: EFFECT = 1;
     */
    EFFECT = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Article$Type extends MessageType<Article> {
    constructor() {
        super("com.article.v1.Article", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "author", kind: "message", T: () => Article_Author },
            { no: 7, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "links", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "views", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "status", kind: "enum", T: () => ["com.article.v1.ArticleStatus", ArticleStatus] },
            { no: 13, name: "created_date", kind: "message", T: () => Timestamp },
            { no: 14, name: "updated_date", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Article>): Article {
        const message = { id: 0n, title: "", summary: "", content: "", links: 0, views: 0, status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Article>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Article): Article {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* com.article.v1.Article.Author author */ 2:
                    message.author = Article_Author.internalBinaryRead(reader, reader.uint32(), options, message.author);
                    break;
                case /* string title */ 7:
                    message.title = reader.string();
                    break;
                case /* string summary */ 8:
                    message.summary = reader.string();
                    break;
                case /* string content */ 9:
                    message.content = reader.string();
                    break;
                case /* int32 links */ 10:
                    message.links = reader.int32();
                    break;
                case /* int32 views */ 11:
                    message.views = reader.int32();
                    break;
                case /* com.article.v1.ArticleStatus status */ 12:
                    message.status = reader.int32();
                    break;
                case /* google.protobuf.Timestamp created_date */ 13:
                    message.createdDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdDate);
                    break;
                case /* google.protobuf.Timestamp updated_date */ 14:
                    message.updatedDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Article, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* com.article.v1.Article.Author author = 2; */
        if (message.author)
            Article_Author.internalBinaryWrite(message.author, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string title = 7; */
        if (message.title !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.title);
        /* string summary = 8; */
        if (message.summary !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.summary);
        /* string content = 9; */
        if (message.content !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.content);
        /* int32 links = 10; */
        if (message.links !== 0)
            writer.tag(10, WireType.Varint).int32(message.links);
        /* int32 views = 11; */
        if (message.views !== 0)
            writer.tag(11, WireType.Varint).int32(message.views);
        /* com.article.v1.ArticleStatus status = 12; */
        if (message.status !== 0)
            writer.tag(12, WireType.Varint).int32(message.status);
        /* google.protobuf.Timestamp created_date = 13; */
        if (message.createdDate)
            Timestamp.internalBinaryWrite(message.createdDate, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_date = 14; */
        if (message.updatedDate)
            Timestamp.internalBinaryWrite(message.updatedDate, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.Article
 */
export const Article = new Article$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Article_Author$Type extends MessageType<Article_Author> {
    constructor() {
        super("com.article.v1.Article.Author", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "article_total", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Article_Author>): Article_Author {
        const message = { id: 0n, name: "", avatar: "", articleTotal: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Article_Author>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Article_Author): Article_Author {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string avatar */ 3:
                    message.avatar = reader.string();
                    break;
                case /* int32 article_total */ 4:
                    message.articleTotal = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Article_Author, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string avatar = 3; */
        if (message.avatar !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.avatar);
        /* int32 article_total = 4; */
        if (message.articleTotal !== 0)
            writer.tag(4, WireType.Varint).int32(message.articleTotal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.Article.Author
 */
export const Article_Author = new Article_Author$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateArticleRequest$Type extends MessageType<CreateArticleRequest> {
    constructor() {
        super("com.article.v1.CreateArticleRequest", [
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "enum", T: () => ["com.article.v1.ArticleStatus", ArticleStatus] }
        ]);
    }
    create(value?: PartialMessage<CreateArticleRequest>): CreateArticleRequest {
        const message = { title: "", summary: "", content: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateArticleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateArticleRequest): CreateArticleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string summary */ 3:
                    message.summary = reader.string();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* com.article.v1.ArticleStatus status */ 5:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateArticleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string summary = 3; */
        if (message.summary !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.summary);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* com.article.v1.ArticleStatus status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.CreateArticleRequest
 */
export const CreateArticleRequest = new CreateArticleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateArticleReply$Type extends MessageType<CreateArticleReply> {
    constructor() {
        super("com.article.v1.CreateArticleReply", []);
    }
    create(value?: PartialMessage<CreateArticleReply>): CreateArticleReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateArticleReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateArticleReply): CreateArticleReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateArticleReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.CreateArticleReply
 */
export const CreateArticleReply = new CreateArticleReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListArticleRequest$Type extends MessageType<ListArticleRequest> {
    constructor() {
        super("com.article.v1.ListArticleRequest", [
            { no: 1, name: "page", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListArticleRequest>): ListArticleRequest {
        const message = { page: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListArticleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListArticleRequest): ListArticleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 page */ 1:
                    message.page = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListArticleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).uint32(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.ListArticleRequest
 */
export const ListArticleRequest = new ListArticleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListArticleReply$Type extends MessageType<ListArticleReply> {
    constructor() {
        super("com.article.v1.ListArticleReply", [
            { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Article },
            { no: 2, name: "total", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "page", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListArticleReply>): ListArticleReply {
        const message = { data: [], total: 0, count: 0, page: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListArticleReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListArticleReply): ListArticleReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.article.v1.Article data */ 1:
                    message.data.push(Article.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 total */ 2:
                    message.total = reader.uint32();
                    break;
                case /* uint32 count */ 3:
                    message.count = reader.uint32();
                    break;
                case /* uint32 page */ 4:
                    message.page = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListArticleReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.article.v1.Article data = 1; */
        for (let i = 0; i < message.data.length; i++)
            Article.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 total = 2; */
        if (message.total !== 0)
            writer.tag(2, WireType.Varint).uint32(message.total);
        /* uint32 count = 3; */
        if (message.count !== 0)
            writer.tag(3, WireType.Varint).uint32(message.count);
        /* uint32 page = 4; */
        if (message.page !== 0)
            writer.tag(4, WireType.Varint).uint32(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.ListArticleReply
 */
export const ListArticleReply = new ListArticleReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetArticleRequest$Type extends MessageType<GetArticleRequest> {
    constructor() {
        super("com.article.v1.GetArticleRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetArticleRequest>): GetArticleRequest {
        const message = { id: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetArticleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetArticleRequest): GetArticleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetArticleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.GetArticleRequest
 */
export const GetArticleRequest = new GetArticleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetArticleReply$Type extends MessageType<GetArticleReply> {
    constructor() {
        super("com.article.v1.GetArticleReply", [
            { no: 1, name: "article", kind: "message", T: () => Article }
        ]);
    }
    create(value?: PartialMessage<GetArticleReply>): GetArticleReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetArticleReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetArticleReply): GetArticleReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.article.v1.Article article */ 1:
                    message.article = Article.internalBinaryRead(reader, reader.uint32(), options, message.article);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetArticleReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.article.v1.Article article = 1; */
        if (message.article)
            Article.internalBinaryWrite(message.article, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.GetArticleReply
 */
export const GetArticleReply = new GetArticleReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateArticleRequest$Type extends MessageType<UpdateArticleRequest> {
    constructor() {
        super("com.article.v1.UpdateArticleRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "enum", T: () => ["com.article.v1.ArticleStatus", ArticleStatus] }
        ]);
    }
    create(value?: PartialMessage<UpdateArticleRequest>): UpdateArticleRequest {
        const message = { id: 0n, title: "", summary: "", content: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateArticleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateArticleRequest): UpdateArticleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string summary */ 3:
                    message.summary = reader.string();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* com.article.v1.ArticleStatus status */ 5:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateArticleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string summary = 3; */
        if (message.summary !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.summary);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* com.article.v1.ArticleStatus status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.UpdateArticleRequest
 */
export const UpdateArticleRequest = new UpdateArticleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateArticleReply$Type extends MessageType<UpdateArticleReply> {
    constructor() {
        super("com.article.v1.UpdateArticleReply", []);
    }
    create(value?: PartialMessage<UpdateArticleReply>): UpdateArticleReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateArticleReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateArticleReply): UpdateArticleReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateArticleReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.UpdateArticleReply
 */
export const UpdateArticleReply = new UpdateArticleReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Success$Type extends MessageType<Success> {
    constructor() {
        super("com.article.v1.Success", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Success>): Success {
        const message = { success: false, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Success>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Success): Success {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Success, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.Success
 */
export const Success = new Success$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListArticlesForUserRequest$Type extends MessageType<ListArticlesForUserRequest> {
    constructor() {
        super("com.article.v1.ListArticlesForUserRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "page", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListArticlesForUserRequest>): ListArticlesForUserRequest {
        const message = { userId: 0n, page: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListArticlesForUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListArticlesForUserRequest): ListArticlesForUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 user_id */ 1:
                    message.userId = reader.uint64().toBigInt();
                    break;
                case /* uint32 page */ 2:
                    message.page = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListArticlesForUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 user_id = 1; */
        if (message.userId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.userId);
        /* uint32 page = 2; */
        if (message.page !== 0)
            writer.tag(2, WireType.Varint).uint32(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.ListArticlesForUserRequest
 */
export const ListArticlesForUserRequest = new ListArticlesForUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListArticlesForUserReply$Type extends MessageType<ListArticlesForUserReply> {
    constructor() {
        super("com.article.v1.ListArticlesForUserReply", [
            { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListArticlesForUserReply_Article },
            { no: 2, name: "total", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "page", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListArticlesForUserReply>): ListArticlesForUserReply {
        const message = { data: [], total: 0, count: 0, page: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListArticlesForUserReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListArticlesForUserReply): ListArticlesForUserReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.article.v1.ListArticlesForUserReply.Article data */ 1:
                    message.data.push(ListArticlesForUserReply_Article.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 total */ 2:
                    message.total = reader.uint32();
                    break;
                case /* uint32 count */ 3:
                    message.count = reader.uint32();
                    break;
                case /* uint32 page */ 4:
                    message.page = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListArticlesForUserReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.article.v1.ListArticlesForUserReply.Article data = 1; */
        for (let i = 0; i < message.data.length; i++)
            ListArticlesForUserReply_Article.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 total = 2; */
        if (message.total !== 0)
            writer.tag(2, WireType.Varint).uint32(message.total);
        /* uint32 count = 3; */
        if (message.count !== 0)
            writer.tag(3, WireType.Varint).uint32(message.count);
        /* uint32 page = 4; */
        if (message.page !== 0)
            writer.tag(4, WireType.Varint).uint32(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.ListArticlesForUserReply
 */
export const ListArticlesForUserReply = new ListArticlesForUserReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListArticlesForUserReply_Article$Type extends MessageType<ListArticlesForUserReply_Article> {
    constructor() {
        super("com.article.v1.ListArticlesForUserReply.Article", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "links", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "views", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "created_date", kind: "message", T: () => Timestamp },
            { no: 14, name: "updated_date", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<ListArticlesForUserReply_Article>): ListArticlesForUserReply_Article {
        const message = { id: 0n, title: "", summary: "", links: 0, views: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListArticlesForUserReply_Article>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListArticlesForUserReply_Article): ListArticlesForUserReply_Article {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string title */ 7:
                    message.title = reader.string();
                    break;
                case /* string summary */ 8:
                    message.summary = reader.string();
                    break;
                case /* int32 links */ 10:
                    message.links = reader.int32();
                    break;
                case /* int32 views */ 11:
                    message.views = reader.int32();
                    break;
                case /* google.protobuf.Timestamp created_date */ 13:
                    message.createdDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdDate);
                    break;
                case /* google.protobuf.Timestamp updated_date */ 14:
                    message.updatedDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListArticlesForUserReply_Article, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string title = 7; */
        if (message.title !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.title);
        /* string summary = 8; */
        if (message.summary !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.summary);
        /* int32 links = 10; */
        if (message.links !== 0)
            writer.tag(10, WireType.Varint).int32(message.links);
        /* int32 views = 11; */
        if (message.views !== 0)
            writer.tag(11, WireType.Varint).int32(message.views);
        /* google.protobuf.Timestamp created_date = 13; */
        if (message.createdDate)
            Timestamp.internalBinaryWrite(message.createdDate, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_date = 14; */
        if (message.updatedDate)
            Timestamp.internalBinaryWrite(message.updatedDate, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.article.v1.ListArticlesForUserReply.Article
 */
export const ListArticlesForUserReply_Article = new ListArticlesForUserReply_Article$Type();
